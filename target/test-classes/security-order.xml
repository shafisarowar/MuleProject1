<?xml version="1.0" encoding="UTF-8"?><mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:ldap="http://www.mulesoft.org/schema/mule/ldap"	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"	xmlns:spring="http://www.springframework.org/schema/beans" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ldap http://www.mulesoft.org/schema/mule/ldap/current/mule-ldap.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">       <flow name="Authentication:ChannelToPRNA">        <logger message="Ecomm-order:Authentication Started - ChannelToPRNA" level="DEBUG" doc:name="Authentication Started"/>        <choice doc:name="Choice">            <when expression="#[message.inboundProperties['http.request.path'].toLowerCase().contains(&quot;order/webhook&quot;)]">                <flow-ref name="webhookCheck" doc:name="webhookCheck"/>            </when>            <otherwise>                <flow-ref name="dbCheck" doc:name="dbCheck"/>            </otherwise>        </choice>   </flow>   <flow name="webhookCheck">             <choice doc:name="Auth Key Available for Channel ?">            <when expression="#[message.inboundProperties.'x-shopify-hmac-sha256' !=null and message.inboundProperties.'x-shopify-hmac-sha256'.length()&gt;=44]">                <logger message="Ecomm-order:#['Authentication Successfull']" level="INFO" doc:name="Authentication Success"/>                <set-payload value="#[['authentication':true]]" doc:name="Authentication Successful"/>            </when>            <otherwise>                <logger message="Ecomm-order:#['Authentication Failed']" level="INFO" doc:name="Authentication Failure"/>                <set-payload value="#[['authentication':false]]" doc:name="Authentication Failed"/>            </otherwise>        </choice>        <catch-exception-strategy doc:name="Catch Exception Strategy">            <set-payload value="#[['authentication':false]]" doc:name="Set False Payload"/>            <set-variable variableName="error_msg" value="#['Failed to Authenticate']" doc:name="Error"/>        </catch-exception-strategy>    </flow>    <flow name="dbCheck">        <db:select config-ref="App_DB_Configuration" doc:name="Check DB for API Key">
            <db:parameterized-query><![CDATA[SELECT ROLENAME
  FROM  OCELOT.APPS_AUTHENTICATION_TOKEN
 WHERE APP_NAME = #[app.name] AND ROLENAME = ${coreapi.order.userrole} AND UPPER(USERNAME) = UPPER(#[message.inboundProperties.'username']) AND TOKEN_VALUE =  #[message.inboundProperties.'api-key']]]></db:parameterized-query>
        </db:select>                <validation:validate-size config-ref="Validation_Configuration" min="1" max="1"   value="#[message.payload]" doc:name="No Records Found Validation"/>                <set-payload value="#[['authentication':true]]" doc:name="Authentication Success Payload"/>                <logger message="Ecomm-order:#['Authentication Success']" level="INFO" doc:name="Authentication Successful"/>                   <choice-exception-strategy doc:name="Choice Exception Strategy">            <catch-exception-strategy when="exception.causedBy(org.mule.extension.validation.api.ValidationException)" doc:name="Catch Exception Strategy - No Records Validation"  >          <set-payload value="#[['authentication':false]]" doc:name="Authentication Failed Payload"/>            <logger message="Ecomm-order:Authentication Failed - Key not found in DB" level="INFO" doc:name="Authentication Failed"/>            </catch-exception-strategy>        </choice-exception-strategy>    </flow>    <flow name="Authentication:WarehouseToPRNA">        <logger message="Ecomm-order:Authentication Started - WarehouseToPRNA " level="DEBUG" doc:name="Authentication"/>                 <choice doc:name="Choice">            <when expression="#[message.inboundProperties.'http.query.params'.warehouse != empty]">                <db:select config-ref="App_DB_Configuration" doc:name="Check DB for Token">
                    <db:parameterized-query><![CDATA[SELECT ROLENAME
  FROM  OCELOT.APPS_AUTHENTICATION_TOKEN
 WHERE APP_NAME = #[app.name] AND ROLENAME = ${coreapi.order.userrole} AND UPPER(USERNAME) = UPPER(#[message.inboundProperties.'username']) AND TOKEN_VALUE =  #[message.inboundProperties.'api-key']]]></db:parameterized-query>
                </db:select>                <logger message="Ecomm-order:#[app.name] and ${coreapi.order.userrole} and #[message.inboundProperties.'username']  and #[message.inboundProperties.'api-key']" level="DEBUG" doc:name="Logger"/>                <validation:validate-size config-ref="Validation_Configuration" min="1" max="1"   value="#[message.payload]" doc:name="No Records Found Validation"/>                <set-payload value="#[['authentication':true]]" doc:name="Authentication Success Payload"/>                <logger message="Ecomm-order:#['Authentication Success']" level="INFO" doc:name="Authentication Successful"/>            </when>            <otherwise>                <set-payload value="#[['authentication':false]]" doc:name="Authentication Failed Payload"/>                <logger message="Ecomm-order:#['Authentication Failed - Default No Warehouse']" level="DEBUG" doc:name="Authentication Failed"/>            </otherwise>        </choice>         <choice-exception-strategy doc:name="Choice Exception Strategy">            <catch-exception-strategy when="exception.causedBy(org.mule.extension.validation.api.ValidationException)" doc:name="Catch Exception Strategy - No Records Validation"  >          <set-payload value="#[['authentication':false]]" doc:name="Authentication Failed Payload"/>            <logger message="Ecomm-order:Authentication Failed - No Token found in DB" level="INFO" doc:name="Authentication Failed"/>            </catch-exception-strategy>        </choice-exception-strategy>         </flow>    </mule>